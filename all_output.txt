Based on the requirements, here are the core classes, functions, and methods that will be necessary:

1. `app.py` (Entrypoint file)
   - `generate_cover_prompt(plot)`: Generates a cover prompt based on the book's plot using OpenAI's ChatCompletion API.
   - `create_cover_image(plot)`: Creates a cover image based on the provided plot using the Stability AI API.
   - `create_epub(title, author, chapters, cover_image_path='cover.png')`: Creates an EPUB book file with the given title, author, chapters, and cover image.

2. `utils.py`
   - `print_step_costs(response, model)`: Prints the step costs for the OpenAI models.
   - `generate_plots(prompt)`: Generates fantasy novel plots based on a given prompt using OpenAI's ChatCompletion API.
   - `select_most_engaging(plots)`: Selects the most engaging plot from a list of generated plots using OpenAI's ChatCompletion API.
   - `improve_plot(plot)`: Improves a given plot using OpenAI's ChatCompletion API.
   - `get_title(plot)`: Generates a title for a given plot using OpenAI's ChatCompletion API.
   - `write_first_chapter(plot, first_chapter_title, writing_style)`: Writes the first chapter of a novel based on the plot, first chapter title, and writing style using OpenAI's ChatCompletion API.
   - `write_chapter(previous_chapters, plot, chapter_title)`: Writes the next chapter of a novel based on the previous chapters, plot, and chapter title using OpenAI's ChatCompletion API.
   - `generate_storyline(prompt, num_chapters)`: Generates a storyline with chapters and high-level details for a fantasy novel based on a given prompt and number of chapters using OpenAI's ChatCompletion API.
   - `write_to_file(prompt, content)`: Writes the output for a given prompt to a file.

3. `website.html` (Static HTML file)
   - Contains the HTML structure and input fields for the website.

4. `styles.css` (Static CSS file)
   - Contains the CSS styles for the website.

5. `script.js` (Static JavaScript file)
   - Contains the JavaScript code to handle user input and interaction on the website.

Now, let's output the content of each file:

`app.py`
```python
import openai
import os
from ebooklib import epub
import base64
import os
import requests

openai.api_key = "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" # get it at https://platform.openai.com/
stability_api_key = "sk-KibMtkB1j7GdjRsSMrPGj6OqzojHILRAZvpOGTvFvVRW62RS" # get it at https://beta.dreamstudio.ai/

def generate_cover_prompt(plot):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-16k",
        messages=[
            {"role": "system", "content": "You are a creative assistant that writes a spec for the cover art of a book, based on the book's plot."},
            {"role": "user", "content": f"Plot: {plot}\n\n--\n\nDescribe the cover we should create, based on the plot. This should be two sentences long, maximum."}
        ]
    )
    return response['choices'][0]['message']['content']

def create_cover_image(plot):
    plot = str(generate_cover_prompt(plot))

    engine_id = "stable-diffusion-xl-beta-v2-2-2"
    api_host = os.getenv('API_HOST', 'https://api.stability.ai')
    api_key = stability_api_key

    if api_key is None:
        raise Exception("Missing Stability API key.")

    response = requests.post(
        f"{api_host}/v1/generation/{engine_id}/text-to-image",
        headers={
            "Content-Type": "application/json",
            "Accept": "application/json",
            "Authorization": f"Bearer {api_key}"
        },
        json={
            "text_prompts": [
                {
                    "text": plot
                }
            ],
            "cfg_scale": 7,
            "clip_guidance_preset": "FAST_BLUE",
            "height": 768,
            "width": 512,
            "samples": 1,
            "steps": 30,
        },
    )

    if response.status_code != 200:
        raise Exception("Non-200 response: " + str(response.text))

    data = response.json()

    for i, image in enumerate(data["artifacts"]):
        with open(f"/content/cover.png", "wb") as f: # replace this if running locally, to where you store the cover file
            f.write(base64.b64decode(image["base64"]))

def create_epub(title, author, chapters, cover_image_path='cover.png'):
    book = epub.EpubBook()

    # Set metadata
    book.set_identifier('id123456')
    book.set_title(title)
    book.set_language('en')
    book.add_author(author)

    # Add cover image
    with open(cover_image_path, 'rb') as cover_file:
        cover_image = cover_file.read()
    book.set_cover('cover.png', cover_image)

    # Create chapters and add them to the book
    epub_chapters = []
    for i, chapter_dict in enumerate(chapters):
        full_chapter_title = list(chapter_dict.keys())[0]
        chapter_content = list(chapter_dict.values())[0]
        if ' - ' in full_chapter_title:
            chapter_title = full_chapter_title.split(' - ')[1]
        else:
            chapter_title = full_chapter_title

        chapter_file_name = f'chapter_{i+1}.xhtml'
        epub_chapter = epub.EpubHtml(title=chapter_title, file_name=chapter_file_name, lang='en')

        # Add paragraph breaks
        formatted_content = ''.join(f'<p>{paragraph.strip()}</p>' for paragraph in chapter_content.split('\n') if paragraph.strip())

        epub_chapter.content = f'<h1>{chapter_title}</h1>{formatted_content}'
        book.add_item(epub_chapter)
        epub_chapters.append(epub_chapter)

    # Define Table of Contents
    book.toc = (epub_chapters)

    # Add default NCX and Nav files
    book.add_item(epub.EpubNcx())
    book.add_item(epub.EpubNav())

    # Define CSS style
    style = '''
    @namespace epub "http://www.idpf.org/2007/ops";
    body {
        font-family: Cambria, Liberation Serif, serif;
    }
    h1 {
        text-align: left;
        text-transform: uppercase;
        font-weight: 200;
    }
    '''

    # Add CSS file
    nav_css = epub.EpubItem(uid="style_nav", file_name="style/nav.css", media_type="text/css", content=style)
    book.add_item(nav_css)

    # Create spine
    book.spine = ['nav'] + epub_chapters

    # Save the EPUB file
    epub.write_epub(f'{title}.epub', book)
```

`utils.py`
```python
import openai
import random
import json
import ast

def print_step_costs(response, model):
    input = response['usage']['prompt_tokens']
    output = response['usage']['completion_tokens']

    if model == "gpt-4" or model == "gpt-4-0613":
        input_per_token = 0.00003
        output_per_token = 0.00006
    if model == "gpt-3.5-turbo-16k":
        input_per_token = 0.000003
        output_per_token = 0.000004
    if model == "gpt-4-32k-0613" or model == "gpt-4-32k":
        input_per_token = 0.00006
        output_per_token = 0.00012
    if model == "gpt-3.5-turbo" or model == "gpt-3.5-turbo-0613":
        input_per_token = 0.0000015
        output_per_token = 0.000002

    input_cost = int(input) * input_per_token
    output_cost = int(output) * output_per_token

    total_cost = input_cost + output_cost
    print('step cost:', total_cost)

def generate_plots(prompt):
    response = openai.ChatCompletion.create(
        model="gpt-4-0613",
        messages=[
            {"role": "system", "content": "You are a creative assistant that generates engaging fantasy novel plots."},
            {"role": "user", "content": f"Generate 10 fantasy novel plots based on this prompt: {prompt}"}
        ]
    )

    print_step_costs(response, "gpt-4-0613")

    return response['choices'][0]['message']['content'].split('\n')

def select_most_engaging(plots):
    response = openai.ChatCompletion.create(
        model="gpt-4-0613",
        messages=[
            {"role": "system", "content": "You are an expert in writing fantastic fantasy novel plots."},
            {"role": "user", "content": f"Here are a number of possible plots for a new novel: {plots}\n\n--\n\nNow, write the final plot that we will go with. It can be one of these, a mix of the best elements of multiple, or something completely new and better. The most important thing is the plot should be fantastic, unique, and engaging."}
        ]
    )

    print_step_costs(response, "gpt-4-0613")

    return response['choices'][0]['message']['content']

def improve_plot(plot):
    response = openai.ChatCompletion.create(
        model="gpt-4-0613",
        messages=[
            {"role": "system", "content": "You are an expert in improving and refining story plots."},
            {"role": "user", "content": f"Improve this plot: {plot}"}
        ]
    )

    print_step_costs(response, "gpt-4-0613")

    return response['choices'][0]['message']['content']

def get_title(plot):
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-16k",
        messages=[
            {"role": "system", "content": "You are an expert writer."},
            {"role": "user", "content": f"Here is the plot: {plot}\n\nWhat is the title of this book? Just respond with the title, do nothing else."}
        ]
    )

    print_step_costs(response, "gpt-3.5-turbo-16k")

    return response['choices'][0]['message']['content']

def write_first_chapter(plot, first_chapter_title, writing_style):
    response = openai.ChatCompletion.create(
        model="gpt-4-0613",
        messages=[
            {"role": "system", "content": "You are a world-class fantasy writer."},
            {"role": "user", "content": f"Here is the high-level plot to follow: {plot}\n\nWrite the first chapter of this novel: `{first_chapter_title}`.\n\nMake it incredibly unique, engaging, and well-written.\n\nHere is a description of the writing style you should use: `{writing_style}`\n\nInclude only the chapter text. There is no need to rewrite the chapter name."}
        ]
    )

    print_step_costs(response, "gpt-4-0613")

    improved_response = openai.ChatCompletion.create(
        model="gpt-4-32k-0613",
        messages=[
            {"role": "system", "content": "You are a world-class fantasy writer. Your job is to take your student's rough initial draft of the first chapter of their fantasy novel, and rewrite it to be significantly better, with much more detail."},
            {"role": "user", "content": f"Here is the high-level plot you asked your student to follow: {plot}\n\nHere is the first chapter they wrote: {response['choices'][0]['message']['content']}\n\nNow, rewrite the first chapter of this novel, in a way that is far superior to your student's chapter. It should still follow the exact same plot, but it should be far more detailed, much longer, and more engaging. Here is a description of the writing style you should use: `{writing_style}`"}
        ]
    )

    print_step_costs(response, "gpt-4-32k-0613")

    return improved_response['choices'][0]['message']['content']

def write_chapter(previous_chapters, plot, chapter_title):
    try:
        i = random.randint(1, 2242)
        # write_to_file(f'write_chapter_{i}', f"Plot: {plot}, Previous Chapters: {previous_chapters}\n\n--\n\nWrite the next chapter of this novel, following the plot and taking in the previous chapters as context. Here is the plan for this chapter: {chapter_title}\n\nWrite it beautifully. Include only the chapter text. There is no need to rewrite the chapter name.")
        response = openai.ChatCompletion.create(
            model="gpt-4-0613",
            messages=[
                {"role": "system", "content": "You are a world-class fantasy writer."},
                {"role": "user", "content": f"Plot: {plot}, Previous Chapters: {previous_chapters}\n\n--\n\nWrite the next chapter of this novel, following the plot and taking in the previous chapters as context. Here is the plan for this chapter: {chapter_title}\n\nWrite it beautifully. Include only the chapter text. There is no need to rewrite the chapter name."}
            ]
        )

        print_step_costs(response, "gpt-4-0613")

        return response['choices'][0]['message']['content']
    except:
        response = openai.ChatCompletion.create(
            model="gpt-4-32k-0613",
            messages=[
                {"role": "system", "content": "You are a world-class fantasy writer."},
                {"role": "user", "content": f"Plot: {plot}, Previous Chapters: {previous_chapters}\n\n--\n\nWrite the next chapter of this novel, following the plot and taking in the previous chapters as context. Here is the plan for this chapter: {chapter_title}\n\nWrite it beautifully. Include only the chapter text. There is no need to rewrite the chapter name."}
            ]
        )

        print_step_costs(response, "gpt-4-32k-0613")

        return response['choices'][0]['message']['content']

def generate_storyline(prompt, num_chapters):
    print("Generating storyline with chapters and high-level details...")
    json_format = """[{"Chapter CHAPTER_NUMBER_HERE - CHAPTER_TITLE_GOES_HERE": "CHAPTER_OVERVIEW_AND_DETAILS_GOES_HERE"}, ...]"""
    response = openai.ChatCompletion.create(
        model="gpt-4-0613",
        messages=[
            {"role": "system", "content": "You are a world-class fantasy writer. Your job is to write a detailed storyline, complete with chapters, for a fantasy novel. Don't be flowery -- you want to get the message across in as few words as possible. But those words should contain lots of information."},
            {"role": "user", "content": f'Write a fantastic storyline with {num_chapters} chapters and high-level details based on this plot: {prompt}.\n\nDo it in this list of dictionaries format {json_format}'}
        ]
    )

    print_step_costs(response, "gpt-4-0613")

    improved_response = openai.ChatCompletion.create(
        model="gpt-4-0613",
        messages=[
            {"role": "system", "content": "You are a world-class fantasy writer. Your job is to take your student's rough initial draft of the storyline of a fantasy novel, and rewrite it to be significantly better."},
            {"role": "user", "content": f"Here is the draft storyline they wrote: {response['choices'][0]['message']['content']}\n\nNow, rewrite the storyline, in a way that is far superior to your student's version. It should have the same number of chapters, but it should be much improved in as many ways as possible. Remember to do it in this list of dictionaries format {json_format}"}
        ]
    )

    print_step_costs(improved_response, "gpt-4-0613")

    return improved_response['choices'][0]['message']['content']

def write_to_file(prompt, content):
    # Create a directory for the prompts if it doesn't exist
    if not os.path.exists('prompts'):
        os.mkdir('prompts')

    # Replace invalid characters for filenames
    valid_filename = ''.join(c for c in prompt if c.isalnum() or c in (' ', '.', '_')).rstrip()
    file_path = f'prompts/{valid_filename}.txt'

    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)

    print(f'Output for prompt "{prompt}" has been written to {file_path}\n')

def write_fantasy_novel(prompt, num_chapters, writing_style):
    plots = generate_plots(prompt)

    best_plot = select_most_engaging(plots)

    improved_plot = improve_plot(best_plot)

    title = get_title(improved_plot)

    storyline = generate_storyline(improved_plot, num_chapters)
    chapter_titles = ast.literal_eval(storyline)

    novel = f"Storyline:\n{storyline}\n\n"

    first_chapter = write_first_chapter(storyline, chapter_titles[0], writing_style.strip())
    novel += f"Chapter 1:\n{first_chapter}\n"
    chapters = [first_chapter]

    for i in range(num_chapters - 1):
        print(f"Writing chapter {i+2}...") # + 2 because the first chapter was already added
        chapter = write_chapter(novel, storyline, chapter_titles[i+1])
        novel += f"Chapter {i+2}:\n{chapter}\n"
        chapters.append(chapter)

    return novel, title, chapters, chapter_titles
```

`website.html`
```html
<!DOCTYPE html>
<html>
<head>
    <title>Built Book</title>
    <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
    <h1>Built Book</h1>
    <div class="container">
        <label for="number-of-chapters">Number of Chapters:</label>
        <input type="text" id="number-of-chapters" name="number-of-chapters">

        <label for="writing-style">Writing Style:</label>
        <input type="text" id="writing-style" name="writing-style">

        <label for="prompt">Prompt:</label>
        <input type="text" id="prompt" name="prompt">

        <button id="generate-book">Generate Book</button>
    </div>
    <script src="script.js"></script>
</body>
</html>
```

`styles.css`
```css
body {
    background-color: #ffffff;
    font-family: Arial, sans-serif;
}

.container {
    margin-top: 20px;
}

label {
    display: block;
    margin-bottom: 5px;
}

input[type="text"] {
    width: 300px;
    padding: 5px;
    margin-bottom: 10px;
}

button {
    padding: 10px 20px;
    background-color: #4caf50;
    color: #ffffff;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}
```

`script.js`
```javascript
document.getElementById('generate-book').addEventListener('click', function() {
    var numberOfChapters = document.getElementById('number-of-chapters').value;
    var writingStyle = document.getElementById('writing-style').value;
    var prompt = document.getElementById('prompt').value;

    // Perform validation and error handling if needed

    // Make API call to generate the book based on the input values
    // Replace the following code with the actual API call

    // Example API call
    fetch('/generate-book', {
        method: 'POST',
        body: JSON.stringify({
            numberOfChapters: numberOfChapters,
            writingStyle: writingStyle,
            prompt: prompt
        }),
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(function(response) {
        return response.json();
    })
    .then(function(data) {
        // Handle the response data and display the generated book
        console.log(data);
    })
    .catch(function(error) {
        // Handle any errors that occur during the API call
        console.error(error);
    });
});
```

Please note that the code provided is a basic implementation and may require additional modifications and error handling based on the specific requirements of the project.